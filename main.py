import math
import time
import matplotlib.pyplot as plt
import numpy as np


def multiplicative_inverse(e, phi):
    d = 0
    x1 = 0
    x2 = 1
    y1 = 1
    temp_phi = phi

    while e > 0:
        temp1 = temp_phi // e
        temp2 = temp_phi - temp1 * e
        temp_phi = e
        e = temp2

        x = x2 - temp1 * x1
        y = d - temp1 * y1

        x2 = x1
        x1 = x
        d = y1
        y1 = y

    if temp_phi == 1:
        return d + phi


def normalPeopleAlgoritm(p, q):
    n = q * q
    f = (p-1) * (q - 1)
    e = 2
    while math.gcd(e, f) != 1:
        e += 1
        if e > f:
            print("error")
    # print("part 2 confirm")
    d = multiplicative_inverse(e, f)
    return e, d, n


def vanila(q, g):
    n = q * g
    f = (q - 1) * (g - 1)
    e = 2
    # print("part 1 confirm")
    while math.gcd(e, f) != 1:
        e += 1
        if e > f:
            print("error")
    # print("part 2 confirm")
    d = 0
    while ((e * d) % f != 1):
        #print(d)
        d+=1
    return e, d, n


def version1(q, g):
    n = q * g
    f = (q - 1) * (g - 1)
    e = 2
    # print("part 1 confirm")
    while math.gcd(e, f) != 1:
        e += 1
        if e > f:
            print("error")
    # print("part 2 confirm")
    d = (f - 1) // e
    #print(d)
    while ((e * d) % f != 1):
        #print(d)
        d += 1
    return e, d, n


def version2(q, g):
    n = q * g
    f = (q - 1) * (g - 1)
    e = 10
    # print("part 1 confirm")
    while math.gcd(e, f) != 1:
        e += 1
        if e > f:
            print("error")
    # print("part 2 confirm")
    k=1
    d = 1
    while (f*k+1)%e != 0:
        #print((f*k+1)/e)
        #print((f*k+1)//e)
        k+=1
        d = (f*k+1)//e
        #print((f*k+1)//e)
    d = (f * k + 1) // e
    return e, d, n


def main():
    #в 2 поля снизу надо вставить простые числа и скрипт высчистает ключи
    q = 35651473647905296640968461607616643137375934206043222617754846448759958340178440586966826616650984797876617499884572289406311065666171227132685760088745517233463443218235144803646438116827856781031782150461692993345125103675307714191424008670366937851596849031863408079797511603269166127620112778770978920896728953698627367930539484689368755426347231018468886564714831261962704979035920402911119080807187828507991934999465302413664878498059899755031675981094064353994905076407885895000603405107183942843960391628241048979591385200516787372208866765562171895531914958057430573838332808191504710321802044383948895491559
    g = 25851341855253167539486543288574280666137587476141483294513286161233316516375382227469486479400020371914797075504047473069446404441895600304880518678746501348853762567599239646876853701822227130319662165984205835219330941651190891048592936176537174819861150977796055020839532800458343159338336664030284249692039425296725474489170221028862011103226978895434681554883486763141487231706887735450740640808880290803478334470483708968932405162821308889013722299641160604337441780877794623583493541423165228081539303569916268440025054985524942430101751789605668965875142894125222500892855109470064121233893742109485629507169
    t3 = time.time()
    e, d, n = version2(q, g)
    # print(time.time() - t3)
    print(e, d, n)
    t1 = time.time()
    print(time.time() - t1)
    return 0


if __name__ == "__main__":
    main()
    '''arr = [50287755833731383732445642317200024436792229287479826849667439155394778789011589884728237016869935401048904119140478027718926274157579414853514979815468886237537164961304579686620789918916322567100761860132528902428873016799380137118499705091721695520386448040441122390323089928175931357730098353871292453106634572870849488365690893373409561685009162129690323291885668966276609364868247962189589789576723253660838221965835336013615956033909782377726619948699123820790563307278595147455696221687726864314349945093398156891710328181555168894315891008163087100520597671689419879745442263525446885269736921243427854058301, 27585189140330524299053064793538566856262347846377648732047337188515778340994054810863973050265866446790560227074731919423531568344912708607479136320902310669106977330871600428136251001224467830566199192845931226632012800462100461629145463053834210754048395491747856781263109676181238998221999395456905993234852460323133852163815585170743274916788651961332794186632238693935356207300438679221159715997924972475893306627538973806270521592155555060391511418800011180935919181552914649369821463408184743074026351951168955073762617831949491106119476587481709704473245982505358774000028912878941642760959722807808252494129, 47061228494642640642286590663631621251610463767204137756156208598986289241981571403219299049548114823494043406501776182597383552167727860055583992723840738962317822880990162726033142679478280019424792454080675104266061613438769115348447308000511336046391077693477100638165324524750299824506389864195051553777581087982394479279195053206257664613453288192376754554125156544401353201578426031025924356345241045041604340477147582475968629225961415381398415301903464299798446393005375100026033561340764100448561278593163069325043727528163279870266431437458797210883430357267850369003277678313349111182499057153875317873683, 20239458023602922882049735407174295278758575917303085716536939870075645114109791634379636698148198913484174170775267524575551426862616035359001988732963847324802424917261013789320171144524800977854381867717128604557300389159830907455322024336398204295766330319596713685914091175628983908882889860276490274972258772224384012861708731994363443716520444981234998640343733146140666233047021935190494604228358772647301729938749772281167934290528735619185222861158021245668676088669118754494060413250469136886417449624316605395057465852761950689965901298423880322113286589670300000851061445094781694676682051056813130899921, 63576796155744663704102915265866539326292762075035940518867241119785598011959661244930874466150885974407504265529027783369694986561598884469782740897945690489520382593096164943687388082809339115702776298201223589575400777641531194551122494455023725373782636156453722676407638143484628037438408361520626378152101274737993043908939854202260265119552566084646555820873068770975820305503777158478348500840485041948599431109963684520525660550798908516429677762064529988992597035421968652813239616551335846066116690513120742980711398765982601837871133996598866529137664158644280678650192529357517638013100281326051528140809, 18768862685685319698611027862472384766618335632289929398527408366151733801571103634606898490829249842321477957666586329362414210365431565439881533021370358061192696589413821900995922876979890662054236739227561585561148098200234921591875130220256727264230245701010132273650895785636261291884636265895882281589008176233197445724695871681215946899323876375813692122524025989421031688550351510875212407783707104450131728245117652224432345453850171032149170211227471776624565394954864820256568665155424736543176961271382310632919336466141527931900827770928801527710508758645152459373406794137541933697509855762166783104199, 59460855135886617219858630611649898339415645641258172781078796588423544333021139715449400438063693128627147077768543011409708133216323159029201397060944768469283502496971998713584453069102280955507329092740867545625907399627062022527055149694392673247591463208932919725419378836651961048565057639435076945429839482854266078618291195291738572402957039762063040976427163892286607786217763047810772824856261645479899963763863305111549766195974124637173572110508432896362114602910002084284216743860825728057854702363372814471145875604141674457772810087229540046427239903997407202477896800627502919818673150974524639593481, 18317073838472612552194312012661393850140198735075455117429943772464746279897161854622494177464936905675647535751141414503074409436813375949491065651348883755501001673228940424050104221258294136662679033544182265306222515709916824341017024690414412164762449498951233433812495409021280719960737250979429900210700860336237489948481670357047529633790932710814634754765993096395510676067550250528325779724041382637460104809263924051321387699949315768221427787842408327710567831987625608034366542189470158341772305129679616096934803742571559630510061959455816372292032491872969548886209480630924690969722949333977789197597]
    timing = []
    elerFunc = []
    counter = 0
    for i in arr:
        for j in arr:
            t = time.time()
            e, d, n = version2(i, j)
            print(d)
            timing.append(time.time() - t)
            counter +=1
            elerFunc.append(counter)

    #print(elerFunc)
    plt.plot(np.array(elerFunc, int), np.array(timing, int))


    timing.clear()
    elerFunc.clear()

    counter = 0
    for i in arr:
        for j in arr:
            t = time.time()
            e, d, n = normalPeopleAlgoritm(i, j)
            timing.append(time.time() - t)
            counter += 1
            elerFunc.append(counter)

    plt.grid()
    plt.plot(np.array(elerFunc, int), np.array(timing, int))
    plt.show()
'''


